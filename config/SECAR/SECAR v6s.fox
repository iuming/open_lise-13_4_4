{  INCLUDE 'COSY' ;}
BEGIN;
INCLUDE 'COSY';

PROCEDURE RUN ;
 VARIABLE RADIUS 1;
 VARIABLE BLOOP 1;
 
{Dipole pole face curvature}
 VARIABLE B1N 1 7;
 VARIABLE B1S1 1 7; VARIABLE B1S2 1 7;
 VARIABLE B2S1 1 7; VARIABLE B2S2 1 7;
 VARIABLE B3S1 1 7; VARIABLE B3S2 1 7;
 VARIABLE B4S1 1 7; VARIABLE B4S2 1 7;
 VARIABLE B7S1 1 7; VARIABLE B7S2 1 7;
 VARIABLE B8S1 1 7; VARIABLE B8S2 1 7;

VARIABLE Q1 1; VARIABLE Q2 1;
VARIABLE Q3 1; VARIABLE Q4 1;
VARIABLE Q5 1; VARIABLE Q6 1;
VARIABLE Q7 1;
VARIABLE Q9 1; VARIABLE Q12 1;
VARIABLE Q8 1; VARIABLE Q10 1;

VARIABLE OBJ 1;
 
VARIABLE NN 1;
VARIABLE WV 1;
VARIABLE WW 1 10;

VARIABLE XX 1;{x_SIZE}
VARIABLE AX 1;
VARIABLE YY 1;{Y-SIZE}
VARIABLE AY 1;
VARIABLE DE 1;

VARIABLE SRXX 1; 
VARIABLE SRAX 1;
VARIABLE SRYY 1;
VARIABLE SRAY 1;
VARIABLE SRDE 1;

VARIABLE M1 1; {Multipole M11}
VARIABLE M2 1;
VARIABLE M3 1;
VARIABLE M4 1;

VARIABLE NX 1;
VARIABLE NA 1;
VARIABLE NY 1;
VARIABLE NB 1;
VARIABLE NE 1;

VARIABLE N1 1;
VARIABLE N2 1;
vARIABLE N3 1;
VARIABLE N4 1;
VARIABLE N5 1;

VARIABLE M13 1; {Octupole in front of WF1}
VARIABLE M14 1;
VARIABLE M15 1;
VARIABLE M16 1;
VARIABLE M17 1;
VARIABLE M18 1;

VARIABLE D1 1;

{ [LISE] [BLOCK] [LISE] [BLOCK] [LISE] [BLOCK] [LISE] [BLOCK] [LISE] [BLOCK] }
{ [LISE] [BLOCK] [LISE] [BLOCK] [LISE] [BLOCK] [LISE] [BLOCK] [LISE] [BLOCK] }
{ [LISE] [BLOCK] [LISE] [BLOCK] [LISE] [BLOCK] [LISE] [BLOCK] [LISE] [BLOCK] }
{____________________________________________________________________________}
{______________________ PM_LISE for COSY   __________________________________}
{ The algorithms below are FUNCTIONS and PROCEDURES in the COSY language that
  are required to be used for writing readable higher order maps in LISE. 
  Since the function DAPRV tends to vary for different COSY versions, it may 
  be necessary to modify the format statements in the code below.  For 
  example, the statement 
  MAPI(1) := R(STR,1,16)
  needs to be changed to 
  MAPI(1) := R(STR,1,15)
  if the first column of the map output lies within columnts 1 and 15.
  by M. Portillo, 2009 Nov 03}
  FUNCTION SF1 X ; {Special format style for output. Allows 1 char for zeros}
      VARIABLE FMTF 10 ; VARIABLE FMTE 10 ;
      FMTF := '(F9.5)' ; FMTE := '(E11.5)' ;
      IF X=0 ;
        SF1 := SI(X) ;
      ELSEIF ABS(X-INT(X))<1E-6 ;
        SF1 := SI(X) ;
      ELSEIF (ABS(X)<100)*(ABS(X)>0.01) ;
        SF1 := SF(X,FMTF) ;
      ELSEIF TRUE ;
        SF1 := SF(X,FMTE) ;
      ENDIF ;
  ENDFUNCTION ;

  FUNCTION TRIM_RIGHT STR ;  {Trim spaces from end of string.}
   VARIABLE LEN 1 ; VARIABLE I 1 ; VARIABLE N 1 ;
   LEN := LENGTH(STR) ; I := LEN+1 ;  N := 2 ;
   WHILE I>N ;          I := I-1 ;
      IF SS(STR,I,I)=' ' ;
         IF (SS(STR,I-1,I-1)#' ')+(I=2) ;
           N := I-1 ;  STR := SS(STR,1,N) ; I := 1 ;
         ENDIF ;
      ENDIF ;
   ENDWHILE ;
   TRIM_RIGHT := STR ;
  ENDFUNCTION ;
{ -- -- map output methods -- -- -- }
 PROCEDURE PM_GIVEN MG IU ; {PM of given map MG to unit IU }
   VARIABLE I 1 ; VARIABLE M 2000 5 ; {PRINTS MAP M TO UNIT IU}
      LOOP I 1 5 ; M(I) := MG(I) + 0*DD(1) ; ENDLOOP ;
      DAPRV M 5 6 TWOND IU ;
 ENDPROCEDURE ;
{Example: for VARIABLE MAPMC 1000 8 ;
 with ANM MAP MAPMC MAPMC ; UM ;  after each map is calculated }

PROCEDURE CONVERT_PM_FORMAT INFILE OUTFILE ;
  {Read files with map elements as written by function DAPRV and rewrite such
    that spaces between columns is ensured.  This will ensure that LISE can 
    read the map elements properly.}
      VARIABLE Z 1 ; VARIABLE Q 1 ;  VARIABLE M 1 ;
   VARIABLE COL 1 ; VARIABLE COUNT 1 ;
   VARIABLE STR 100 ; VARIABLE SUBS 3 ;   VARIABLE L 1 ; VARIABLE J 1 ;
   VARIABLE STR_6 20 ;   VARIABLE MAPI 1 8 ;
   OPENF 53 INFILE 'OLD' ;  { file written in DAPRV format }
   OPENF 54 OUTFILE 'UNKNOWN' ; { File with LISE readable format}
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      COUNT := 0 ;
    L := 1 ; {minimum # of characters (Length)}
    WHILE L>0 ;
       READ 53 STR ; SUBS := SS(STR,3,6) ;
       IF (SUBS='---')+(SUBS='END') ;
            L := 0 ; {WRITE 6 '  END Of File at LINE '&SI(COUNT) ;}
        ELSEIF SUBS='' ;
            L := 0 ; WRITE 6 '  no data in line '&S(COUNT) ;
        ELSEIF 1=1 ; {Count deliminators and locate data}
        {...end Extract data}
         COUNT := COUNT + 1 ;
        {*Uncomment the lines below to diagnose the defined string formats.
         WRITE 6 SS(STR,1,15)  ;
         WRITE 6 SS(STR,16,29) ;
         WRITE 6 SS(STR,30,43) ;
         WRITE 6 SS(STR,44,57) ;
         WRITE 6 SS(STR,58,71) ;
         WRITE 6 SS(STR,72,85) ; QUIT 0 ;*}
         MAPI(1) := R(STR,1,15)  ; MAPI(2) := R(STR,16,29) ;
         MAPI(3) := R(STR,30,43) ; MAPI(4) := R(STR,44,57) ;
         MAPI(5) := R(STR,58,71) ;
         STR_6 := SS(STR,72,85) ;
         STR_6 := TRIM_RIGHT(STR_6) ;
     {write final positions to file }
       STR := ' ' ;
       LOOP J 1 5 ; STR := STR&SF(MAPI(J),'(E12.6)')&' ' ; ENDLOOP ;
       STR := STR&STR_6 ;
       WRITE 54 STR ;
        ENDIF ;
        {IF MOD(COUNT,500)=0 ; WRITE 6 ' '&SI(COUNT) ; ENDIF ;}
    ENDWHILE ;
    WRITE 54 '----------------------------------------------------' ;
      CLOSEF 53 ;
      CLOSEF 54 ;
ENDPROCEDURE ;

PROCEDURE PTWT IU ; VARIABLE M NM1 TWOND ;
      VARIABLE I 1 ; VARIABLE MM NM1 MAX(NV,6) ;       VARIABLE I0 10 ;
      CATR MAP M SPOS ; LOOP I TWOND NV ; MM(I) := DD(I) ; ENDLOOP ;
      LOOP I 1 TWOND 2 ; MM(I) := .01*DD(I) ; MM(I+1) := .001*DD(I+1) ;
         ENDLOOP ; IF ND>2 ; MM(6) := .01*DD(6) ; ENDIF ;
      POLVAL 1 M TWOND MM NV MM TWOND ; LOOP I 1 TWOND 2 ; MM(I) :=  100*MM(I);
         MM(I+1) :=  1000*MM(I+1) ; ENDLOOP ; IF ND>2 ; MM(6) := .1*MM(6) ;
         ENDIF ; LOOP I 1 5 ; MM(I) := MM(I) + 0*DD(1) ; ENDLOOP ;
  WRITE IU '------------------ MAP IN TRANSPORT UNITS, COSY FORMAT, PM';
      DAPRV MM 5 6 TWOND IU ;
  WRITE IU '------------------ MAP IN TRANSPORT UNITS, COSY FORMAT, WM';
      I0 := '(E24.16)' ;
      WRITE IU ' L  '&SF(0,I0) ;
      WRITE IU ' P ('&SF(0,I0)&','&SF(0,I0)&','&SF(0,I0)&')' ;
      WRITE IU ' A ('&SF(0,I0)&','&SF(0,I0)&','&SF(0,I0)&')' ;
      LOOP I0 1 TWOND ;
        WRITE IU ' VARIABLE '&SF(I0,'(I3)') ;
        WRITE IU MM(I0)+0*DD(1) ;
      ENDLOOP ;
ENDPROCEDURE ;

PROCEDURE PM_LISE OUTFILE ;
{Write elements of the map up in 1st order to file OUTFILE.
   Store path length, S_PATH, of element as element (5,0).
   This procedure require function MAP_EL to be included. }
      VARIABLE TMP 1 ;
      VARIABLE I 1 ; VARIABLE J 1 ; VARIABLE K 1 ; VARIABLE LINE 1 ;
      VARIABLE M NM1 TWOND ; VARIABLE MM NM1 MAX(NV,6) ;
      VARIABLE DVAR 1 ; VARIABLE DVAR0 3 ; VARIABLE DVAR_STR 3 ;
      VARIABLE UI 1 ; VARIABLE STR 81 ; VARIABLE STRD 80 ; VARIABLE S0 50 ; 
   FUNCTION ME_MM M I ; DAPEE MM(M) I ME_MM ; ENDFUNCTION ;
   TMP := NOC ; CO 1 ; 
   CATR MAP M SPOS ; {Convert MAP to TRANSPORT map M}
   LOOP I TWOND NV ;
      MM(I) := DD(I) ;
   ENDLOOP ;
   LOOP I 1 TWOND 2 ;
     MM(I) := .01*DD(I) ;
     MM(I+1) := .001*DD(I+1) ;
   ENDLOOP ;
   IF ND>2 ; MM(6) := .01*DD(6) ; ENDIF ;
   POLVAL 1 M TWOND MM NV MM TWOND ;
   LOOP I 1 TWOND 2 ;
     MM(I) :=  100*MM(I) ;
     MM(I+1) :=  1000*MM(I+1) ;
   ENDLOOP ;
   IF ND>2 ; MM(6) := .1*MM(6) ; ENDIF ;
   LOOP I 1 5 ;
     MM(I) := MM(I) + 0*DD(1) ;
   ENDLOOP ;
  UI := 71 ;
  OPENF UI 'TMP' 'UNKNOWN' ;
  {+++OPENF UI OUTFILE 'UNKNOWN' ;+++}
  WRITE UI ' 6 1' ; {Flag for LISE to interpret units in cm(1) }
  LOOP J 1 6 ;
     STR := '' ;
     LOOP I 1 6 ;
       STR := STR&' '&SF(ME_MM(J,I), '(E12.5E2)') ;
     ENDLOOP ;
     WRITE UI STR ;
  ENDLOOP ;
  CO TMP ;
  PTWT UI ; 
  CLOSEF UI ;
  {+++} CONVERT_PM_FORMAT 'TMP' OUTFILE ; {+++}
ENDPROCEDURE;

{____________________________________________________________________________}
{______________________ PM_LISE for COSY   __________________________________}
{ The algorithms below are FUNCTIONS and PROCEDURES in the COSY language that
  are required to be used for writing readable higher order maps in LISE. 
  Since the function DAPRV tends to vary for different COSY versions, it may 
  be necessary to modify the format statements in the code below.  For 
  example, the statement 
  MAPI(1) := R(STR,1,16)
  needs to be changed to 
  MAPI(1) := R(STR,1,15)
  if the first column of the map output lies within columnts 1 and 15.
  by M. Portillo, 2009 Nov 03}
{ -- -- map output methods -- -- -- }
 PROCEDURE PM_GIVEN MG IU ; {PM of given map MG to unit IU }
   VARIABLE I 1 ; VARIABLE M 2000 5 ; {PRINTS MAP M TO UNIT IU}
      LOOP I 1 5 ; M(I) := MG(I) + 0*DD(1) ; ENDLOOP ;
      DAPRV M 5 6 TWOND IU ;
 ENDPROCEDURE ;
{Example: for VARIABLE MAPMC 1000 8 ;
 with ANM MAP MAPMC MAPMC ; UM ;  after each map is calculated }

PROCEDURE CONVERT_PM_FORMAT INFILE OUTFILE ;
  {Read files with map elements as written by function DAPRV and rewrite such
    that spaces between columns is ensured.  This will ensure that LISE can 
    read the map elements properly.}
      VARIABLE Z 1 ; VARIABLE Q 1 ;  VARIABLE M 1 ;
   VARIABLE COL 1 ; VARIABLE COUNT 1 ;
   VARIABLE STR 100 ; VARIABLE SUBS 3 ;   VARIABLE L 1 ; VARIABLE J 1 ;
   VARIABLE STR_6 20 ;   VARIABLE MAPI 1 8 ;
   OPENF 53 INFILE 'OLD' ;  { file written in DAPRV format }
   OPENF 54 OUTFILE 'UNKNOWN' ; { File with LISE readable format}
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      READ 53 STR ; {WRITE 54 TRIM_RIGHT(STR) ; } WRITE 54 STR ;
      COUNT := 0 ;
    L := 1 ; {minimum # of characters (Length)}
    WHILE L>0 ;
       READ 53 STR ; SUBS := SS(STR,3,6) ;
       IF (SUBS='---')+(SUBS='END') ;
            L := 0 ; {WRITE 6 '  END Of File at LINE '&SI(COUNT) ;}
        ELSEIF SUBS='' ;
            L := 0 ; WRITE 6 '  no data in line '&S(COUNT) ;
        ELSEIF 1=1 ; {Count deliminators and locate data}
        {...end Extract data}
         COUNT := COUNT + 1 ;
        {*Uncomment the lines below to diagnose the defined string formats.
         WRITE 6 SS(STR,1,15)  ;
         WRITE 6 SS(STR,16,29) ;
         WRITE 6 SS(STR,30,43) ;
         WRITE 6 SS(STR,44,57) ;
         WRITE 6 SS(STR,58,71) ;
         WRITE 6 SS(STR,72,85) ; QUIT 0 ;*}
         MAPI(1) := R(STR,1,15)  ; MAPI(2) := R(STR,16,29) ;
         MAPI(3) := R(STR,30,43) ; MAPI(4) := R(STR,44,57) ;
         MAPI(5) := R(STR,58,71) ;
         STR_6 := SS(STR,72,85) ;
         STR_6 := TRIM_RIGHT(STR_6) ;
     {write final positions to file }
       STR := ' ' ;
       LOOP J 1 5 ; STR := STR&SF(MAPI(J),'(E12.6)')&' ' ; ENDLOOP ;
       STR := STR&STR_6 ;
       WRITE 54 STR ;
        ENDIF ;
        {IF MOD(COUNT,500)=0 ; WRITE 6 ' '&SI(COUNT) ; ENDIF ;}
    ENDWHILE ;
    WRITE 54 '----------------------------------------------------' ;
      CLOSEF 53 ;
      CLOSEF 54 ;
ENDPROCEDURE ;

PROCEDURE PTWT IU ; VARIABLE M NM1 TWOND ;
      VARIABLE I 1 ; VARIABLE MM NM1 MAX(NV,6) ;       VARIABLE I0 10 ;
      CATR MAP M SPOS ; LOOP I TWOND NV ; MM(I) := DD(I) ; ENDLOOP ;
      LOOP I 1 TWOND 2 ; MM(I) := .01*DD(I) ; MM(I+1) := .001*DD(I+1) ;
         ENDLOOP ; IF ND>2 ; MM(6) := .01*DD(6) ; ENDIF ;
      POLVAL 1 M TWOND MM NV MM TWOND ; LOOP I 1 TWOND 2 ; MM(I) :=  100*MM(I) ;
         MM(I+1) :=  1000*MM(I+1) ; ENDLOOP ; IF ND>2 ; MM(6) := .1*MM(6) ;
         ENDIF ; LOOP I 1 5 ; MM(I) := MM(I) + 0*DD(1) ; ENDLOOP ;
  WRITE IU '------------------ MAP IN TRANSPORT UNITS, COSY FORMAT, PM';
      DAPRV MM 5 6 TWOND IU ;
  WRITE IU '------------------ MAP IN TRANSPORT UNITS, COSY FORMAT, WM';
      I0 := '(E24.16)' ;
      WRITE IU ' L  '&SF(0,I0) ;
      WRITE IU ' P ('&SF(0,I0)&','&SF(0,I0)&','&SF(0,I0)&')' ;
      WRITE IU ' A ('&SF(0,I0)&','&SF(0,I0)&','&SF(0,I0)&')' ;
      LOOP I0 1 TWOND ;
        WRITE IU ' VARIABLE '&SF(I0,'(I3)') ;
        WRITE IU MM(I0)+0*DD(1) ;
      ENDLOOP ;
ENDPROCEDURE ;

PROCEDURE PM_LISE OUTFILE ;
{Write elements of the map up in 1st order to file OUTFILE.
   Store path length, S_PATH, of element as element (5,0).
   This procedure require function MAP_EL to be included. }
      VARIABLE TMP 1 ;
      VARIABLE I 1 ; VARIABLE J 1 ; VARIABLE K 1 ; VARIABLE LINE 1 ;
      VARIABLE M NM1 TWOND ; VARIABLE MM NM1 MAX(NV,6) ;
      VARIABLE DVAR 1 ; VARIABLE DVAR0 3 ; VARIABLE DVAR_STR 3 ;
      VARIABLE UI 1 ; VARIABLE STR 81 ; VARIABLE STRD 80 ; VARIABLE S0 50 ; 
   FUNCTION ME_MM M I ; DAPEE MM(M) I ME_MM ; ENDFUNCTION ;
   TMP := NOC ; CO 1 ; 
   CATR MAP M SPOS ; {Convert MAP to TRANSPORT map M}
   LOOP I TWOND NV ;
      MM(I) := DD(I) ;
   ENDLOOP ;
   LOOP I 1 TWOND 2 ;
     MM(I) := .01*DD(I) ;
     MM(I+1) := .001*DD(I+1) ;
   ENDLOOP ;
   IF ND>2 ; MM(6) := .01*DD(6) ; ENDIF ;
   POLVAL 1 M TWOND MM NV MM TWOND ;
   LOOP I 1 TWOND 2 ;
     MM(I) :=  100*MM(I) ;
     MM(I+1) :=  1000*MM(I+1) ;
   ENDLOOP ;
   IF ND>2 ; MM(6) := .1*MM(6) ; ENDIF ;
   LOOP I 1 5 ;
     MM(I) := MM(I) + 0*DD(1) ;
   ENDLOOP ;
  UI := 71 ;
  OPENF UI 'TMP' 'UNKNOWN' ;
  {+++OPENF UI OUTFILE 'UNKNOWN' ;+++}
  WRITE UI ' 6 1' ; {Flag for LISE to interpret units in cm(1) }
  LOOP J 1 6 ;
     STR := '' ;
     LOOP I 1 6 ;
       STR := STR&' '&SF(ME_MM(J,I), '(E12.5E2)') ;
     ENDLOOP ;
     WRITE UI STR ;
  ENDLOOP ;
  CO TMP ;
  PTWT UI ; 
  CLOSEF UI ;
  {+++} CONVERT_PM_FORMAT 'TMP' OUTFILE ; {+++}
ENDPROCEDURE;

{______________________ PM_LISE -- END   ____________________________________} 
{**************** RECOIL_LINE ************}

PROCEDURE RECOIL_BL;

{VARIABLE X_MAP 1;}

FR 2.5; {Fringe field flag}
DL 0.8000 ;                                            {DL1}


UM;
M5 0.2500 -0.36534 -0.00060 0 0 0 0.05;                {Q1+Hex}
PM_LISE 'Q01.TXT' ;


DL 0.1900 ;                                            {DL2}

UM;
MQ 0.3000 0.217880 0.068;                              {Q2}
PM_LISE 'Q02.TXT' ;


DL 0.5800 ;                                            {DL3}

UM;
MC RADIUS 22.5 0.030 B1N B1S1 B1S2 7;                  {B1}
PM_LISE 'B01.TXT' ;

DL 1.0000 ;                                            {DL4}

UM;
MC RADIUS 22.5 0.030 B1N B2S1 B2S2 7;                  {B2}
PM_LISE 'B02.TXT' ;

DL 0.7700 ;                                            {DL5}
DL 0.4000 ;                                            {DL6}

UM;
MH 0.2600 0.008620 0.11;                               {HEX1}
PM_LISE 'H01.TXT' ;

DL 0.2700 ;                                            {DL7}

UM;
MQ 0.3500 0.242644 0.11;                               {Q3}
PM_LISE 'Q03.TXT' ;


DL 0.3500 ;                                            {DL8}

UM;
M5 0.3500 -0.24501 0 0 0 0 0.08;                       {Q4}
PM_LISE 'Q04.TXT' ;


DL 0.2100 ;                                            {DL9}

UM;
MQ 0.3500 0.111280 0.06;                               {Q5}
PM_LISE 'Q05.TXT' ;

DL 0.1450 ;                                            {DL10}
DL 0.1850 ;                                            {DL11}
DL 0.1700 ;                                            {DL12}

UM;
MC RADIUS 22.5 0.05 B1N B3S1 B3S2 7;                   {B3}
PM_LISE 'B03.TXT' ;

DL 0.5100 ;                                            {DL13}

UM;
MC RADIUS 22.5 0.05 B1N B4S1 B4S2 7;                   {B4}
PM_LISE 'B04.TXT' ;

DL 0.3000 ;                                            {DL14}

UM;
M5 0.2600 0 0.014495 0 0 0 0.12;                       {HEX2}
PM_LISE 'H02.TXT' ;

DL 0.2700 ;                                            {DL15}
DL 0.2700 ;                                            {DL16}

UM;
MQ 0.3400 0.181721 0.14;                               {Q6}
PM_LISE 'Q06.TXT' ;

DL 0.2000 ;                                            {DL17}

UM;
MQ 0.3400 -0.0301475 0.13;                             {Q7}
PM_LISE 'Q07.TXT' ;

DL 0.5000 ;                                            {DL18}

UM;
CB;
WF 7.0  7.0 2.365 0.11 ;                               {WF1}
CB;
PM_LISE 'WF1.TXT' ;

DL 0.5000 ;{THIS IS PART OF WF1!}                      {DL19}

UM;
M5 0.2600 0 -0.043400 0 0 0 0.11;                      {HEX3}
PM_LISE 'H03.TXT' ;
                      
DL 0.2800 ;                                            {DL20}

UM;
M5 0.2600 0 0 0.006255 0 0 0.07;                       {OCT1}
PM_LISE 'OCT1.TXT' ;

DL 1.7500 ;                                            {DL21}

{PM_LISE 'DL21_GLOBAL.TXT' ;}
{SM SAVEMAP1;}

DL 0.2500 ;                                            {DL30}

UM;
MQ 0.3000 -0.220000 0.07;                              {Q12}
PM_LISE 'Q12.TXT' ;

DL 0.3000 ;                                            {DL31}

UM;
MQ 0.3000 0.201600 0.05;                               {Q13}
PM_LISE 'Q13.TXT' ;

DL 0.6600 ;                                            {DL32}

UM;
MC RADIUS 55. 0.030 B1N B7S1 B7S2 4;                   {B7}
PM_LISE 'B07.TXT' ;

DL 0.6800 ;                                            {DL33}

UM;
MC RADIUS 55. 0.030 B1N B8S1 B8S2 4;                   {B8}
PM_LISE 'B08.TXT' ;

DL 0.8600 ;                                            {DL34}

UM;
MQ 0.3000 0.131470 0.05;                               {Q14}
PM_LISE 'Q14.TXT' ;


DL 0.4500 ;                                            {DL35}

UM;
MQ 0.3000 -0.145000 0.05;                              {Q15}
PM_LISE 'Q15.TXT' ;

DL 1.7000 ;                                            {DL36}
DL 0.7500 ;                                            {DL37}
DL 0.7500 ;                                            {DL38}
{SM SAVEMAP2;}

{PM_LISE 'DL38_GLOBAL.TXT' ;}

ENDPROCEDURE;


{############################################################################}
{########################### DEFINITION AND COMMAND #########################}
{############################################################################}
OV 5 3 0 ;

{LOOP BLOOP 1 7; B1N(BLOOP):=0.; ENDLOOP;}

WSET 1.5E-3;

XX:=0.00075;
AX:=0.025;
YY:=0.00075;
AY:=0.025;
DE:= 0.031;

B1S1(1):=0.190000;
B1S1(2):=0.002609;
B1S1(3):=0.160015;
B1S1(4):=0.360326;
B1S1(5):=-517.318539;
B1S1(6):=140.687453;
B1S1(7):=-3747.687430;

B1S2(1):=0.150000;
B1S2(2):=-0.022302;
B1S2(3):=0.181500;
B1S2(4):=0.019177;
B1S2(5):=214.655432;
B1S2(6):=781.177463;
B1S2(7):=-1893.287169;

B2S1(1):=0.115000;
B2S1(2):=0.010357;
B2S1(3):=0.229670;
B2S1(4):=-9.465125;
B2S1(5):=76.444961;
B2S1(6):=181.579096;
B2S1(7):=-705.187568;

B2S2(1):=0.115000;
B2S2(2):=-0.252562;
B2S2(3):=1.789717;
B2S2(4):=12.228605;
B2S2(5):=18.121317;
B2S2(6):=58.251665;
B2S2(7):=8312.598818;

B3S1(1):=0.190000;
B3S1(2):=1.141314;
B3S1(3):=-12.183752;
B3S1(4):=36.196180;
B3S1(5):=2160.579296;
B3S1(6):=-397258.349307;
B3S1(7):=8155186.482039;

B3S2(1):=0.115000;
B3S2(2):=0.048268;
B3S2(3):=45.839967;
B3S2(4):=-0.046209;
B3S2(5):=8609.216556;
B3S2(6):=111953.486044;
B3S2(7):=1024768.467454;

B4S1(1):=0.190000;
B4S1(2):=-0.300520;
B4S1(3):=-6.395038;
B4S1(4):=-0.203815;
B4S1(5):=6.742939;
B4S1(6):=2049.006982;
B4S1(7):=-6233.314076;

B4S2(1):=0.190000;
B4S2(2):=-0.029223;
B4S2(3):=-0.707870;
B4S2(4):=0.324736;
B4S2(5):=-141.255567;
B4S2(6):=184.839168;
B4S2(7):=-1502.974787;

Q1:=-0.36535641;
Q2:= 0.217879;
Q3:= 0.26551297;
Q4:= -0.245008807;
Q5:= 0.11127275;
Q6:= 0.206373;
Q7:=-0.0329836952;
Q8:= -0.0000385205;
Q9:=  0.0005418704;
Q10:= -0.000002510730;
Q12:= -0.0017355765;
M3:= -0.007870233; 
M4:= -0.000231808; 
M13:= 0.0144957123; 
M14:=-0.043972085;
M15:= 0.010264846;
M16:=-0.00061988306;
M17:= 0;
M18:= 0.029690722;
M1:=  0.00;  
M2:=  0.00; 

RADIUS := 1.25;
RP 206 66 21 ;

UM;
NN:=1;
RECOIL_BL;

ENDPROCEDURE ;

RUN ;
END ;
